- Command Format should include a name for the task so that qstat gives a better idea of which tasks are running
- Need a way of detecting worker failure (and need a definition of "failure" modes)
- Ideally, need a way of canceling a worker that appears to be hanging (e.g. if most other workers have already finished)
- Ability to track which blocks have completed, and execute only unfinished work (in the event that the job had to be killed)
- Threads other than the main thread (i.e. the lazyflow.request.Worker threads) must somehow forward uncaught exceptions to the main thread.

- Need a better way to decide how many active requests to make (this is currently hardcoded in OpH5WriterBigDataset).
- Right now, training features are recomputed in every task.  Might be worth having sparse storage of features data in the project file...
- Ability to "background clusterize" any intermediate operator?
- Consistent semantics for batch jobs and cluster jobs.
- And consistent command-line syntax
- More intelligent method of dividing up the workload than just equally dividing each spatial dim.
- Maybe allow operators (or output slots) to declare themselves "clusterable"?  This would mean they would have a unique id that is somehow saved to the project file and restored upon project deserialization.  Then the id would be passed via command line arg to node jobs.

