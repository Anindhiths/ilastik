# -*- coding: utf-8 -*-
from PyQt4.QtCore import *
from PyQt4.QtGui import *
import sys
import numpy, qimage2ndarray


class imageView2D(QGraphicsView):
    def __init__(self):
        QGraphicsView.__init__(self)  
        self.setDragMode(QGraphicsView.ScrollHandDrag)
        self.installEventFilter(self)
        
    def keyPressEvent(self, event):
        cursor = QCursor()
        mousePosition = cursor.pos()
        if event.key() == Qt.Key_Left and self.underMouse():
            cursor.setPos(mousePosition.x()-1, mousePosition.y())
        if event.key() == Qt.Key_Right and self.underMouse():
            cursor.setPos(mousePosition.x()+1, mousePosition.y())
        if event.key() == Qt.Key_Up and self.underMouse():
            cursor.setPos(mousePosition.x(), mousePosition.y()-1)
        if event.key() == Qt.Key_Down and self.underMouse():
            cursor.setPos(mousePosition.x(), mousePosition.y()+1)


class imageView2DHud1(QHBoxLayout):
    def __init__(self, parent=None ):
        QHBoxLayout.__init__(self, parent)
        self.setContentsMargins(0,0,0,0)
        self.setSpacing(0)
        
    def createHud(self, axis, value, color, fontColor, outlineColor):
        self.colorLabel = QLabel()
        self.colorLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.colorLabel)
        
        self.axisLabel = QLabel()
        self.axisLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.axisLabel)
        
        self.spinBox = QSpinBox()
        self.spinBox.setAlignment(Qt.AlignRight)
        self.spinBox.setMaximum(value)
        self.addWidget(self.spinBox)
        
        self.spinBoxLabel = QLabel()
        self.spinBoxLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.spinBoxLabel)
        
        width = self.spinBox.sizeHint().height()
        height = self.spinBox.sizeHint().height() 
        pixmap = QPixmap(width, height)
        pixmap.fill(color)
        self.colorLabel.setPixmap(pixmap)
        
        pixmap2 = QPixmap(width*10, height*10)
        pixmap2.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(75.0, height*10-50), font, axis)
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        #text with outline
        pixmap = QPixmap(width*10, height*10)
        pixmap.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(outlineColor)
        pen.setWidth(40)
        painter.setPen(pen)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(75.0, height*10-50), font, axis)
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.drawPixmap(0,0,pixmap2)
        painter.end()
        pixmap = pixmap.scaled(QSize(width,height),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.axisLabel.setPixmap(pixmap)
        
        
        pixmap2 = QPixmap(80*10, height*10)
        pixmap2.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(95.0, height*10-50), font, "of " + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        #text with outline
        pixmap = QPixmap(80*10, height*10)
        pixmap.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(outlineColor)
        pen.setWidth(40)
        painter.setPen(pen)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(95.0, height*10-50), font, "of " + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.drawPixmap(0,0,pixmap2)
        painter.end()
        pixmap = pixmap.scaled(QSize(80,height),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.spinBoxLabel.setPixmap(pixmap)
        
        
    
        self.addStretch()
        
        self.dockButton = QToolButton()
        self.dockButton.setText("D")
#        self.dockButton.clicked.connect(self.on_dockButton)
        self.addWidget(self.dockButton)
        
        self.maxmizeButton = QToolButton()
        self.maxmizeButton.setText("X")
#        self.maxmizeButton.clicked.connect(self.on_maxmizeButton)
        self.addWidget(self.maxmizeButton)
        self.addSpacing(20)
        
        
class imageView2DHud2(QHBoxLayout):
    def __init__(self, parent=None ):
        QHBoxLayout.__init__(self, parent)
        self.setContentsMargins(0,0,0,0)
        self.setSpacing(0)
        
    def createHud(self, axis, value, color, fontColor, outlineColor):
        self.axisLabel = QLabel()
        self.axisLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.axisLabel)
        
        self.spinBox = QSpinBox()
        self.spinBox.setAlignment(Qt.AlignRight)
        self.spinBox.setMaximum(value)
        self.addWidget(self.spinBox)
        
        self.spinBoxLabel = QLabel()
        self.spinBoxLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.spinBoxLabel)
        
        width = self.spinBox.sizeHint().height()
        height = self.spinBox.sizeHint().height() 
        
        pixmap2 = QPixmap(width*10, height*10)
        pixmap2.fill(color)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50, height*10-50), font, axis)
        brush = QBrush(outlineColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        pixmap2 = pixmap2.scaled(QSize(width,height),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.axisLabel.setPixmap(pixmap2)
        
        
        pixmap2 = QPixmap(80*10, height*10)
        pixmap2.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50.0, height*10-50), font, "of " + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        #text with outline
        pixmap = QPixmap(80*10, height*10)
        pixmap.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(outlineColor)
        pen.setWidth(40)
        painter.setPen(pen)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50.0, height*10-50), font, "of " + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.drawPixmap(0,0,pixmap2)
        painter.end()
        pixmap = pixmap.scaled(QSize(80,height),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.spinBoxLabel.setPixmap(pixmap)
        
        
    
        self.addStretch()
        
        self.dockButton = QToolButton()
        self.dockButton.setText("D")
#        self.dockButton.clicked.connect(self.on_dockButton)
        self.addWidget(self.dockButton)
        
        self.maxmizeButton = QToolButton()
        self.maxmizeButton.setText("X")
#        self.maxmizeButton.clicked.connect(self.on_maxmizeButton)
        self.addWidget(self.maxmizeButton)
        self.addSpacing(20)
        
        
        
class imageView2DHud3(QHBoxLayout):
    def __init__(self, parent=None ):
        QHBoxLayout.__init__(self, parent)
        self.setContentsMargins(0,0,0,0)
        self.setSpacing(0)
        
    def createHud(self, axis, value, color, fontColor, outlineColor):
        self.axisLabel = QLabel()
        self.axisLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.axisLabel)
        
        self.spinBox = QSpinBox()
        self.spinBox.setAlignment(Qt.AlignRight)
        self.spinBox.setMaximum(value)
        self.spinBox.setSuffix(" of " + str(value))
        self.addWidget(self.spinBox)
        
        width = self.spinBox.sizeHint().height()
        height = self.spinBox.sizeHint().height() 
        
        pixmap2 = QPixmap(width*10, height*10)
        pixmap2.fill(color)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50, height*10-50), font, axis)
        brush = QBrush(outlineColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        pixmap2 = pixmap2.scaled(QSize(width,height),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.axisLabel.setPixmap(pixmap2)        
    
        self.addStretch()
        
        self.dockButton = QToolButton()
        self.dockButton.setText("D")
#        self.dockButton.clicked.connect(self.on_dockButton)
        self.addWidget(self.dockButton)
        
        self.maxmizeButton = QToolButton()
        self.maxmizeButton.setText("X")
#        self.maxmizeButton.clicked.connect(self.on_maxmizeButton)
        self.addWidget(self.maxmizeButton)
        self.addSpacing(20)
        
class imageView2DHud4(QHBoxLayout):
    def __init__(self, parent=None ):
        QHBoxLayout.__init__(self, parent)
        self.setContentsMargins(0,4,0,0)
        self.setSpacing(0)
        
    def createHud(self, axis, value, color, fontColor, outlineColor):
        self.addSpacing(4)
        self.axisLabel = QLabel()
        self.axisLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
        self.addWidget(self.axisLabel)
        
        self.spinBox = QSpinBox()
        self.spinBox.setButtonSymbols(QAbstractSpinBox.NoButtons)
        self.spinBox.setMaximum(10)
        self.spinBox.setAlignment(Qt.AlignRight)
        self.spinBox.setMaximumHeight(20)
        self.spinBox.setSuffix("/10")
        font = self.spinBox.font()
        font.setPixelSize(12)
        self.spinBox.setFont(font)
        self.addSpacing(4)
        self.addWidget(self.spinBox)

        self.testLabel = QVBoxLayout()
        self.plusLabel = QLabel()
        pixmap = QPixmap(10,10)
        pixmap.fill(Qt.blue)
        self.plusLabel.setPixmap(pixmap)
        self.testLabel.addWidget(self.plusLabel)
        self.minusLabel = QLabel()
        pixmap = QPixmap(10,10)
        pixmap.fill(Qt.white)
        self.minusLabel.setPixmap(pixmap)
        self.testLabel.addWidget(self.minusLabel)
        self.addSpacing(2)
#        self.addLayout(self.testLabel)
        
        self.spinBoxLabel = QLabel()
#        self.spinBoxLabel.setAttribute(Qt.WA_TransparentForMouseEvents, True)
#        self.addWidget(self.spinBoxLabel)
        
        
        

        
        width = 25
        height = 25 
        
        pixmap2 = QPixmap(width*10, height*10)
        pixmap2.fill(color)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50, height*10-50), font, axis)
        brush = QBrush(outlineColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        pixmap2 = pixmap2.scaled(QSize(20,20),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.axisLabel.setPixmap(pixmap2)
        
        
        pixmap2 = QPixmap(80*10, height*10)
        pixmap2.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap2)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50.0, height*10-50), font, "/" + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.end()
        #text with outline
        pixmap = QPixmap(80*10, height*10)
        pixmap.fill(Qt.transparent)
        painter = QPainter()
        painter.begin(pixmap)
        painter.setRenderHint(QPainter.Antialiasing)
        pen = QPen(outlineColor)
        pen.setWidth(60)
        painter.setPen(pen)
        font = QFont()
        font.setBold(True)
        font.setPixelSize(height*10-30)
        path = QPainterPath()
        path.addText(QPointF(50.0, height*10-50), font, "/" + str(value))
        brush = QBrush(fontColor)
        painter.setBrush(brush)
        painter.drawPath(path)        
        painter.setFont(font)
        painter.drawPixmap(0,0,pixmap2)
        painter.end()
        pixmap = pixmap.scaled(QSize(80,15),Qt.KeepAspectRatio, Qt.SmoothTransformation)
        self.spinBoxLabel.setPixmap(pixmap)
        
        
    
        self.addStretch()
        
        self.dockButton = QLabel()
        pixmap = QPixmap(20,20)
        pixmap.fill(Qt.blue)
        self.dockButton.setPixmap(pixmap)
        self.addWidget(self.dockButton)
        self.addSpacing(4)
        self.maxButton = QLabel()
        self.maxButton.setPixmap(pixmap)
        self.addWidget(self.maxButton)
        self.addSpacing(4)
        
class VolumeEditorStyleTest(QWidget):
    def __init__(self):
        QWidget.__init__(self)
        
        self.layout = QVBoxLayout()
        self.setLayout(self.layout)
        self.layout.setContentsMargins(4, 4, 4, 4)
        
        self.splitVertical = QSplitter(Qt.Vertical, self)
        self.layout.addWidget(self.splitVertical)
        self.splitHorizontal1 = QSplitter(Qt.Horizontal, self.splitVertical)
        self.splitHorizontal2 = QSplitter(Qt.Horizontal, self.splitVertical)
        
        self.graphicsView1 = imageView2D()
        self.grscene1 = QGraphicsScene()
        pixmapImage = QPixmap(qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8)))
        self.grscene1.addPixmap(pixmapImage)
        self.graphicsView1.setScene(self.grscene1)
        self.splitHorizontal1.addWidget(self.graphicsView1)
        self.graphicsView1Layout = QVBoxLayout(self.graphicsView1)
        self.graphicsView1Layout.setContentsMargins(0,0,0,0)
        self.graphicsView1Hud = imageView2DHud1()
        self.graphicsView1Hud.createHud("X", 10, Qt.blue, Qt.blue, Qt.white)
        self.graphicsView1Hud.spinBox.setStyleSheet("QSpinBox { color: blue; font: bold}")
        self.graphicsView1Layout.addLayout(self.graphicsView1Hud)
        self.graphicsView1Hudb = imageView2DHud1()
        self.graphicsView1Hudb.createHud("Y", 10, Qt.red, Qt.red, Qt.white)
        self.graphicsView1Hudb.spinBox.setStyleSheet("QSpinBox { color: red; font: bold}")
        self.graphicsView1Layout.addLayout(self.graphicsView1Hudb)
        self.graphicsView1Hudc = imageView2DHud1()
        self.graphicsView1Hudc.createHud("Z", 10, Qt.green, Qt.green, Qt.black)
        self.graphicsView1Hudc.spinBox.setStyleSheet("QSpinBox { color: green; font: bold}")
        self.graphicsView1Layout.addLayout(self.graphicsView1Hudc)
        self.graphicsView1Layout.addStretch()
        
        self.graphicsView2 = imageView2D()
        self.grscene2 = QGraphicsScene()
        pixmapImage = QPixmap(qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8)))
        self.grscene2.addPixmap(pixmapImage)
        self.graphicsView2.setScene(self.grscene2)
        self.splitHorizontal1.addWidget(self.graphicsView2)
        self.graphicsView2Layout = QVBoxLayout(self.graphicsView2)
        self.graphicsView2Layout.setContentsMargins(0,0,0,0)
        self.graphicsView2Hud = imageView2DHud2()
        self.graphicsView2Hud.createHud("X", 10, Qt.blue, Qt.blue, Qt.white)
        self.graphicsView2Hud.spinBox.setStyleSheet("QSpinBox { color: blue; font: bold}")
        self.graphicsView2Layout.addLayout(self.graphicsView2Hud)
        self.graphicsView2Hudb = imageView2DHud2()
        self.graphicsView2Hudb.createHud("Y", 10, Qt.red, Qt.red, Qt.white)
        self.graphicsView2Hudb.spinBox.setStyleSheet("QSpinBox { color: red; font: bold}")
        self.graphicsView2Layout.addLayout(self.graphicsView2Hudb)
        self.graphicsView2Hudc = imageView2DHud2()
        self.graphicsView2Hudc.createHud("Z", 10, Qt.green, Qt.green, Qt.black)
        self.graphicsView2Hudc.spinBox.setStyleSheet("QSpinBox { color: green; font: bold}")
        self.graphicsView2Layout.addLayout(self.graphicsView2Hudc)
        self.graphicsView2Layout.addStretch()
        
        self.graphicsView3 = imageView2D()
        self.grscene3 = QGraphicsScene()
        pixmapImage = QPixmap(qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8)))
        self.grscene3.addPixmap(pixmapImage)
        self.graphicsView3.setScene(self.grscene3)
        self.splitHorizontal2.addWidget(self.graphicsView3)
        self.graphicsView3Layout = QVBoxLayout(self.graphicsView3)
        self.graphicsView3Layout.setContentsMargins(0,0,0,0)
        self.graphicsView3Hud = imageView2DHud3()
        self.graphicsView3Hud.createHud("X", 10, Qt.blue, Qt.blue, Qt.white)
        self.graphicsView3Layout.addLayout(self.graphicsView3Hud)
        self.graphicsView3Hudb = imageView2DHud3()
        self.graphicsView3Hudb.createHud("Y", 10, Qt.red, Qt.red, Qt.white)
        self.graphicsView3Layout.addLayout(self.graphicsView3Hudb)
        self.graphicsView3Hudc = imageView2DHud3()
        self.graphicsView3Hudc.createHud("Z", 10, Qt.green, Qt.green, Qt.black)
        self.graphicsView3Layout.addLayout(self.graphicsView3Hudc)
        self.graphicsView3Layout.addStretch()
        
        self.graphicsView4 = imageView2D()
        self.grscene4 = QGraphicsScene()
        pixmapImage = QPixmap(qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8)))
        pixmap = QPixmap(420, 445)
        pixmap.fill(Qt.transparent) 
        painter = QPainter()
        painter.begin(pixmap)
        painter.drawPixmap(10,35,pixmapImage)
        painter.end()
        qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8))
        self.grscene4.addPixmap(pixmap)
        self.graphicsView4.setScene(self.grscene4)
        self.splitHorizontal2.addWidget(self.graphicsView4)
        self.graphicsView4Layout = QVBoxLayout(self.graphicsView4)
        self.graphicsView4Layout.setContentsMargins(0,0,0,0)
        self.graphicsView4Hud = imageView2DHud3()
        self.graphicsView4Hud.createHud("X", 10, Qt.blue, Qt.blue, Qt.white)
        self.graphicsView4Hud.spinBox.setStyleSheet("QSpinBox { color: white; font: bold; background-color: blue;}")
        self.graphicsView4Layout.addLayout(self.graphicsView4Hud)
        self.graphicsView4Hudb = imageView2DHud3()
        self.graphicsView4Hudb.createHud("Y", 10, Qt.red, Qt.red, Qt.white)
        self.graphicsView4Hudb.spinBox.setStyleSheet("QSpinBox { color: white; font: bold; background-color: red;}")
        self.graphicsView4Layout.addLayout(self.graphicsView4Hudb)
        self.graphicsView4Hudc = imageView2DHud3()
        self.graphicsView4Hudc.createHud("Z", 10, Qt.green, Qt.green, Qt.black)
        self.graphicsView4Hudc.spinBox.setStyleSheet("QSpinBox { color: black; font: bold; background-color: green;}")
        self.graphicsView4Layout.addLayout(self.graphicsView4Hudc)
        self.graphicsView4Layout.addStretch()
        
        
#        self.graphicsView5 = imageView2D()
#        
#        self.graphicsView5.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
#        self.graphicsView5.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOff)
#        self.grscene5 = QGraphicsScene()
#        self.grscene5.setSceneRect(-50,-50,500,500)
#        pixmapImage = QPixmap(qimage2ndarray.array2qimage((numpy.random.rand(400,400)*256).astype(numpy.uint8)))
#        self.grscene5.addPixmap(pixmapImage)
#        self.graphicsView5.setScene(self.grscene5)
#        self.splitHorizontal2.addWidget(self.graphicsView5)
#        self.graphicsView5Layout = QVBoxLayout(self.graphicsView5)
#        self.graphicsView5Layout.setContentsMargins(0,0,0,0)
#        self.graphicsView5Hud = imageView2DHud4()
#        self.graphicsView5Hud.createHud("X", 10, Qt.blue, Qt.blue, Qt.white)
#        self.graphicsView5Hud.spinBox.setStyleSheet("QSpinBox { color: white; font: bold; background-color: blue; border:0;}")
#        self.graphicsView5Layout.addLayout(self.graphicsView5Hud)
#        self.graphicsView5Hudb = imageView2DHud4()
#        self.graphicsView5Hudb.createHud("Y", 10, Qt.red, Qt.red, Qt.white)
#        self.graphicsView5Layout.addLayout(self.graphicsView5Hudb)
#        self.graphicsView5Hudc = imageView2DHud4()
#        self.graphicsView5Hudc.createHud("Z", 10, Qt.green, Qt.green, Qt.black)
#        self.graphicsView5Layout.addLayout(self.graphicsView5Hudc)
#        self.graphicsView5Layout.addStretch()
        
        
        self.statusBarLayout = QHBoxLayout()
        self.statusBarLayout.setSpacing(0)
        self.statusBarLayout.addSpacing(20)
        self.layout.addLayout(self.statusBarLayout)
        self.coords = QLabel("coords:XYZ")
        self.statusBarLayout.addWidget(self.coords)
        self.statusBarLayout.addSpacing(20)
        self.grauwert = QLabel("grauwert:xxx")
        self.statusBarLayout.addWidget(self.grauwert)
        self.statusBarLayout.addStretch()
        self.checkBox = QCheckBox()
        self.checkBox.setText("Current Position")
        self.statusBarLayout.addWidget(self.checkBox)
        self.statusBarLayout.addSpacing(20)
        
        self.channelLabel = QLabel("Channel:")
        self.statusBarLayout.addWidget(self.channelLabel)
        
        self.channelSpinBox = QSpinBox()
        self.statusBarLayout.addWidget(self.channelSpinBox)
        self.statusBarLayout.addSpacing(20)
        
        self.timeLabel = QLabel("Time:")
        self.statusBarLayout.addWidget(self.timeLabel)
        
        self.timeSpinBox = QSpinBox()
        self.statusBarLayout.addWidget(self.timeSpinBox)
        self.statusBarLayout.addSpacing(20)
        


app = QApplication(sys.argv)
ex = VolumeEditorStyleTest()
ex.show()
ex.raise_()
sys.exit(app.exec_())